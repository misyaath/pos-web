/* istanbul ignore next */'use strict';var _jsxFileName = '/var/www/html/pos-web/src/components/__tests__/Button.test.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_react3 = require('@testing-library/react');
var /* istanbul ignore next */_Button = require('../Button'); /* istanbul ignore next */var _Button2 = _interopRequireDefault(_Button);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

it('should Render Button without crush', function () {
  /* istanbul ignore next */(0, /* istanbul ignore next */_react3. /* istanbul ignore next */render)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2. /* istanbul ignore next */default, /* istanbul ignore next */{ onClickHandler: () => {
    }, loading: false, text: 'login', __source: { fileName: _jsxFileName, lineNumber: 6 }, __self: this }));
});

it('button should render normal button when not loading', function () {
  const wrapper = /* istanbul ignore next */(0, /* istanbul ignore next */_react3. /* istanbul ignore next */render)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2. /* istanbul ignore next */default, /* istanbul ignore next */{ onClickHandler: () => {
    }, loading: false, text: 'login', __source: { fileName: _jsxFileName, lineNumber: 11 }, __self: this }));
  expect(wrapper.getByText('login').tagName).toBe('BUTTON');
});

it('button should render loading button when loading', function () {
  const wrapper = /* istanbul ignore next */(0, /* istanbul ignore next */_react3. /* istanbul ignore next */render)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2. /* istanbul ignore next */default, /* istanbul ignore next */{ onClickHandler: () => {
    }, loading: true, text: 'login', __source: { fileName: _jsxFileName, lineNumber: 17 }, __self: this }));
  expect(wrapper.getByText('Loading...').tagName).toBe('BUTTON');
  expect(wrapper.getByText('Loading...').attributes).toHaveAttribute('disabled');

});